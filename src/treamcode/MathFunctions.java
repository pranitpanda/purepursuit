package treamcode;


import org.opencv.core.Point;

import java.util.ArrayList;

import static java.lang.Math.pow;
import static java.lang.Math.sqrt;


public class MathFunctions {

    public static double AngleWrap(double angle){
        while(angle < -Math.PI){
            angle+= 2*Math.PI;
        }

        while (angle > Math.PI){
            angle -= 2*Math.PI;

        }
        return angle;
    }
    public static ArrayList<Point> lineCircleIntersection(Point circleCenter, double radius, Point linePoint1, Point linePoint2){
        if (Math.abs(linePoint1.y-linePoint2.y)<0.003){
            linePoint1.y = linePoint2.y + 0.003;
        }
        if (Math.abs(linePoint1.x - linePoint2.x) < 0.003){
            linePoint1.x = linePoint2.x + 0.003;
        }

        double m1 = (linePoint2.y-linePoint1.y)/(linePoint2.x-linePoint1.x);

        double quadraticA = 1.0 + pow(m1,2);

        double x1 = linePoint1.x - circleCenter.x;
        double y1 = linePoint1.y - circleCenter.y;

        double quadraticB = (2.0*m1*y1) - (2.0* pow(m1,2) * x1);

        double quadraticC = (pow(m1,2) * pow(x1,2)) - (2.0*y1*m1*x1) + pow(y1,2) - pow(radius,2);

        ArrayList<Point> allPoints = new ArrayList<>();

        try {
            double xRoot1 = (-quadraticB + sqrt( pow(quadraticB,2) - (4*quadraticA*quadraticC) )) / (2*quadraticA) ;
            double yRoot1 = m1*(xRoot1-x1)+ y1;
            xRoot1+=circleCenter.x;
            yRoot1+=circleCenter.y;

            double minX;
            double maxX;
            if (linePoint1.x < linePoint2.x){
                minX = linePoint1.x;
                maxX = linePoint2.x;
            }else{
                minX = linePoint2.x;
                maxX = linePoint1.x;
            }

            if (xRoot1 < maxX && xRoot1 > minX){
                allPoints.add(new Point(xRoot1,yRoot1));
            }


            double xRoot2 = (-quadraticB - sqrt( pow(quadraticB,2) - (4*quadraticA*quadraticC) )) / (2*quadraticA) ;
            double yRoot2 = m1*(xRoot2-x1)+ y1;
            xRoot2+=circleCenter.x;
            yRoot2+=circleCenter.y;

            if (xRoot2 < maxX && xRoot2 > minX){
                allPoints.add(new Point(xRoot2,yRoot2));
            }


        } catch (Exception e){

        }
        return allPoints;

    }

    //Returns {distance,x,y} between robot and the line generated by the two curvepoints
    public static double[] pointLineIntersection(Point robotPos, CurvePoint startLine, CurvePoint endLine){
        if (endLine.x == startLine.x){
            endLine.x+=0.000000000001;
        }

        double m1 = (endLine.y-startLine.y)/(endLine.x-startLine.x);
        if (m1==0){
            m1+=0.000000000000001;
        }

        double b1 = endLine.y- (m1*endLine.x);

        double A = -m1;
        double B = 1;
        double C = -b1;

        double distance = Math.abs(A*robotPos.x+B*robotPos.y+C)/Math.hypot(A,B);

        double m2 = (-1.0/m1);
        double b2 = robotPos.y - (m2*robotPos.x);

        if (m1==m2){
            m1= m2+0.00000000001;
        }
        double xIntersection = (b2-b1)/(m1-m2);
        double yIntersection = (m1*xIntersection)+b1;

        double minX;
        double maxX;
        if (startLine.x < endLine.x){
            minX = startLine.x;
            maxX = endLine.x;
        }else{
            minX = endLine.x;
            maxX = startLine.x;
        }

        double[] ret = new double[3];
        if (xIntersection > minX && xIntersection < maxX){
            ret[0] = distance;
            ret[1] = xIntersection;
            ret[2] = yIntersection;

        }else{
            ret[0] = 1000000;
            ret[1] = 1000000;
            ret[2] = 1000000;
        }

        return ret;

    }
}
